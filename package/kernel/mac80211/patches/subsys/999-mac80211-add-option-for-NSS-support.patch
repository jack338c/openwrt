--- a/net/mac80211/Kconfig	2019-01-03 21:03:17.839001000 +0800
+++ b/net/mac80211/Kconfig	2019-01-03 21:04:43.931001000 +0800
@@ -16,6 +16,13 @@
 
 if MAC80211 != n
 
+config MAC80211_NSS_SUPPORT
+	bool "Enable NSS support for IPQ platform"
+	default n
+	---help---
+	This option enables support for NSS in boards
+	like AP148.
+
 config MAC80211_HAS_RC
 	bool
 
--- a/local-symbols	2019-01-03 21:24:00.087001000 +0800
+++ b/local-symbols	2019-01-03 21:24:56.535001000 +0800
@@ -47,6 +47,7 @@ LIB80211_CRYPT_CCMP=
 LIB80211_CRYPT_TKIP=
 LIB80211_DEBUG=
 MAC80211=
+MAC80211_NSS_SUPPORT=
 MAC80211_HAS_RC=
 MAC80211_RC_MINSTREL=
 MAC80211_RC_DEFAULT_MINSTREL=
--- a/net/mac80211/ieee80211_i.h	2019-01-03 21:04:57.527001000 +0800
+++ b/net/mac80211/ieee80211_i.h	2019-01-03 21:05:44.827001000 +0800
@@ -35,6 +35,10 @@
 
 extern const struct cfg80211_ops mac80211_config_ops;
 
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+#include <nss_api_if.h>
+#endif
+
 struct ieee80211_local;
 
 /* Maximum number of broadcast/multicast frames to buffer when some of the
@@ -988,6 +992,10 @@ struct ieee80211_sub_if_data {
 
 	bool hw_80211_encap;
 
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+	struct nss_virt_if_handle *nssctx;
+#endif
+
 	/* must be last, dynamically sized area in this! */
 	struct ieee80211_vif vif;
 };
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -645,6 +645,13 @@ static int ieee80211_stop(struct net_device *dev)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+	if (sdata->nssctx) {
+		nss_virt_if_destroy_sync(sdata->nssctx);
+		sdata_info(sdata, "Destroyed NSS virtual interface\n");
+	}
+#endif
+
 	ieee80211_do_stop(sdata, true);
 
 	return 0;
@@ -1348,6 +1355,14 @@ int ieee80211_do_open(struct wireless_dev *wdev, bool coming_up)
 
 	ieee80211_recalc_ps(local);
 
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+	sdata->nssctx = nss_virt_if_create_sync(dev);
+	if (sdata->nssctx)
+		sdata_info(sdata, "Created a NSS virtual interface\n");
+	else
+		sdata_err(sdata, "Failed to create a NSS virtual interface\n");
+#endif
+
 	if (sdata->vif.type == NL80211_IFTYPE_MONITOR ||
 	    sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||
 	    local->ops->wake_tx_queue) {
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -87,6 +87,53 @@ static u8 *ieee80211_get_bssid(struct ieee80211_hdr *hdr, size_t len,
 	return NULL;
 }
 
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+#define case_rtn_string(val) case val: return #val
+
+static const char *nss_tx_status_str(nss_tx_status_t status)
+{
+	switch (status) {
+		case_rtn_string(NSS_TX_SUCCESS);
+		case_rtn_string(NSS_TX_FAILURE);
+		case_rtn_string(NSS_TX_FAILURE_QUEUE);
+		case_rtn_string(NSS_TX_FAILURE_NOT_READY);
+		case_rtn_string(NSS_TX_FAILURE_TOO_LARGE);
+		case_rtn_string(NSS_TX_FAILURE_TOO_SHORT);
+		case_rtn_string(NSS_TX_FAILURE_NOT_SUPPORTED);
+		case_rtn_string(NSS_TX_FAILURE_BAD_PARAM);
+		case_rtn_string(NSS_TX_FAILURE_NOT_ENABLED);
+		case_rtn_string(NSS_TX_FAILURE_SYNC_BAD_PARAM);
+		case_rtn_string(NSS_TX_FAILURE_SYNC_TIMEOUT);
+		case_rtn_string(NSS_TX_FAILURE_SYNC_FW_ERR);
+	default:
+		return "Unknown NSS TX status";
+	}
+}
+
+static int netif_rx_nss(struct ieee80211_sub_if_data *sdata,
+			 struct sk_buff *skb)
+{
+	int ret;
+
+	if (!sdata->nssctx)
+		return 1;
+
+	skb_push(skb, ETH_HLEN);
+
+	ret = nss_virt_if_tx_buf(sdata->nssctx, skb);
+	if (unlikely(ret)) {
+		if (net_ratelimit()) {
+			sdata_err(sdata, "NSS TX failed with error: %s\n",
+				  nss_tx_status_str(ret));
+		}
+		skb_pull(skb, ETH_HLEN);
+		return 1;
+	}
+
+	return 0;
+}
+#endif
+
 /*
  * monitor mode reception
  *
@@ -2574,11 +2646,17 @@ static void ieee80211_deliver_skb_to_local_stack(struct sk_buff *skb,
 	} else {
 		memset(skb->cb, 0, sizeof(skb->cb));
 
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+		if (netif_rx_nss(sdata, skb)) {
+#endif
 		/* deliver to local stack */
 		if (rx->list)
 			list_add_tail(&skb->list, rx->list);
 		else
 			netif_receive_skb(skb);
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+		}
+#endif
 	}
 }
 
@@ -4469,10 +4551,17 @@ static bool ieee80211_invoke_fast_rx(struct ieee80211_rx_data *rx,
 	/* deliver to local stack */
 	skb->protocol = eth_type_trans(skb, fast_rx->dev);
 	memset(skb->cb, 0, sizeof(skb->cb));
-	if (rx->list)
-		list_add_tail(&skb->list, rx->list);
-	else
-		netif_receive_skb(skb);
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+		if (netif_rx_nss(rx->sdata, skb)) {
+#endif
+		/* deliver to local stack */
+		if (rx->list)
+			list_add_tail(&skb->list, rx->list);
+		else
+			netif_receive_skb(skb);
+#ifdef CPTCFG_MAC80211_NSS_SUPPORT
+		}
+#endif
 
 	return true;
  drop:
